/* tslint:disable */
/* eslint-disable */
import { GraphQLResolveInfo, GraphQLScalarType } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
 

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface GQLQuery {
  ping: string;
}

export interface GQLMutation {
  ping: string;
}

export type GQLDate = Date;

export interface GQLPageInfo {
  hasNextPage: boolean;
  hasPreviousPage: boolean;
  itemsCount: number;
  pagesCount: number;
  currentPage: number;
  openEnded: boolean;
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface GQLResolver {
  Query?: GQLQueryTypeResolver;
  Mutation?: GQLMutationTypeResolver;
  Date?: GraphQLScalarType;
  PageInfo?: GQLPageInfoTypeResolver;
}
export interface GQLQueryTypeResolver<TParent = any> {
  ping?: QueryToPingResolver<TParent>;
}

export interface QueryToPingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface GQLMutationTypeResolver<TParent = any> {
  ping?: MutationToPingResolver<TParent>;
}

export interface MutationToPingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface GQLPageInfoTypeResolver<TParent = any> {
  hasNextPage?: PageInfoToHasNextPageResolver<TParent>;
  hasPreviousPage?: PageInfoToHasPreviousPageResolver<TParent>;
  itemsCount?: PageInfoToItemsCountResolver<TParent>;
  pagesCount?: PageInfoToPagesCountResolver<TParent>;
  currentPage?: PageInfoToCurrentPageResolver<TParent>;
  openEnded?: PageInfoToOpenEndedResolver<TParent>;
}

export interface PageInfoToHasNextPageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface PageInfoToHasPreviousPageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface PageInfoToItemsCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface PageInfoToPagesCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface PageInfoToCurrentPageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface PageInfoToOpenEndedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}
